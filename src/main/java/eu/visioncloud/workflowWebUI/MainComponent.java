package eu.visioncloud.workflowWebUI;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.IOException;
import java.io.InputStream;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Set;

import javax.imageio.ImageIO;

import matcher.TriggerMatcher;

import obj.HandlerInfo;

import com.vaadin.annotations.AutoGenerated;
import com.vaadin.terminal.StreamResource;
import com.vaadin.terminal.StreamResource.StreamSource;
import com.vaadin.terminal.ThemeResource;
import com.vaadin.ui.AbsoluteLayout;
import com.vaadin.ui.AbstractSelect;
import com.vaadin.ui.Alignment;
import com.vaadin.ui.Button;
import com.vaadin.ui.Button.ClickEvent;
import com.vaadin.ui.CustomComponent;
import com.vaadin.ui.Embedded;
import com.vaadin.ui.HorizontalLayout;
import com.vaadin.ui.Label;
import com.vaadin.ui.Panel;
import com.vaadin.ui.PopupView;
import com.vaadin.ui.Window;
import com.vaadin.ui.Window.CloseEvent;

import com.vaadin.ui.NativeButton;
import com.vaadin.ui.TabSheet;
import com.vaadin.ui.Tree;
import com.vaadin.ui.VerticalLayout;
import com.vaadin.data.Item;
import com.vaadin.data.Property;

public class MainComponent extends CustomComponent {

	/*- VaadinEditorProperties={"grid":"RegularGrid,20","showGrid":true,"snapToGrid":true,"snapToObject":true,"movingGuides":false,"snappingDistance":10} */

	@AutoGenerated
	private AbsoluteLayout mainLayout;
	@AutoGenerated
	private TabSheet mainTab;
	@AutoGenerated
	private HorizontalLayout hl_inputTab;
	@AutoGenerated
	private VerticalLayout btnPanel2;
	@AutoGenerated
	private Button btn_genComp;
	@AutoGenerated
	private Button btn_genAbs;
	@AutoGenerated
	private Tree targetTree;
	@AutoGenerated
	private VerticalLayout btnPanel1;
	@AutoGenerated
	private NativeButton edit;
	@AutoGenerated
	private NativeButton create;
	@AutoGenerated
	private NativeButton remove_all;
	@AutoGenerated
	private NativeButton remove;
	@AutoGenerated
	private NativeButton add_all;
	@AutoGenerated
	private NativeButton add;
	@AutoGenerated
	private Tree sourceTree;

	private PopupView handlerForm;

	private Set<HandlerInfo> handlers;
	// private Set<HandlerInfo> selectedHandlers = new HashSet<HandlerInfo>();

	private static final Object CAPTION_PROPERTY = "caption";
	/**
	 * 
	 */

	private static final long serialVersionUID = 5324959476063726521L;

	/**
	 * The constructor should first build the main layout, set the composition
	 * root and then do any custom initialization.
	 * 
	 * The constructor will not be automatically regenerated by the visual
	 * editor.
	 */
	public MainComponent(Set<HandlerInfo> handlers) {
		this.handlers = handlers;
		buildMainLayout();
		setCompositionRoot(mainLayout);

		// TODO add user code here
	}

	@AutoGenerated
	private AbsoluteLayout buildMainLayout() {
		// common part: create layout
		mainLayout = new AbsoluteLayout();
		mainLayout.setImmediate(false);
		mainLayout.setWidth("100%");
		mainLayout.setHeight("100%");
		mainLayout.setMargin(false);

		// top-level component properties
		setWidth("100.0%");
		setHeight("100.0%");

		// mainTab
		mainTab = buildMainTab();
		// mainLayout.addComponent(new Label("WTF"));
		mainLayout.addComponent(mainTab);

		return mainLayout;
	}

	@AutoGenerated
	private TabSheet buildMainTab() {
		// common part: create layout
		mainTab = new TabSheet();
		mainTab.setImmediate(true);
		mainTab.setWidth("100.0%");
		mainTab.setHeight("100.0%");

		// hl_inputTab
		hl_inputTab = buildHl_inputTab();
		mainTab.addTab(hl_inputTab, "Tab", null);

		return mainTab;
	}

	@AutoGenerated
	private HorizontalLayout buildHl_inputTab() {
		// common part: create layout
		hl_inputTab = new HorizontalLayout();
		hl_inputTab.setImmediate(false);
		hl_inputTab.setWidth("100.0%");
		hl_inputTab.setHeight("100.0%");
		hl_inputTab.setMargin(false);

		// sourceTree
		sourceTree = new Tree();
		sourceTree.setImmediate(false);
		sourceTree.setWidth("150px");
		sourceTree.setHeight("100.0%");
		sourceTree.setCaption("Source Handler List");
		sourceTree.addContainerProperty(CAPTION_PROPERTY, String.class, "");
		sourceTree
				.setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_PROPERTY);
		sourceTree.setItemCaptionPropertyId(CAPTION_PROPERTY);
		sourceTree.setMultiSelect(true);
		fillTree();
		hl_inputTab.addComponent(sourceTree);

		// btnPanel1
		btnPanel1 = buildBtnPanel1();
		Panel btnPanel1Wrapper = new Panel();
		btnPanel1Wrapper.addComponent(btnPanel1);
		hl_inputTab.addComponent(btnPanel1Wrapper);
		hl_inputTab.setComponentAlignment(btnPanel1Wrapper, Alignment.MIDDLE_CENTER);
		// targetTree
		targetTree = new Tree();
		targetTree.setImmediate(false);
		targetTree.setWidth("150px");
		targetTree.setHeight("100.0%");
		targetTree.setCaption("Target Handler List");
		targetTree.addContainerProperty(CAPTION_PROPERTY, String.class, "");
		targetTree
				.setItemCaptionMode(AbstractSelect.ITEM_CAPTION_MODE_PROPERTY);
		targetTree.setItemCaptionPropertyId(CAPTION_PROPERTY);
		targetTree.setMultiSelect(true);
		hl_inputTab.addComponent(targetTree);

		// btnPanel2
		btnPanel2 = buildBtnPanel2();
		hl_inputTab.addComponent(btnPanel2);
		hl_inputTab.setComponentAlignment(btnPanel2, Alignment.MIDDLE_CENTER);
		
		return hl_inputTab;
	}

	@AutoGenerated
	private VerticalLayout buildBtnPanel1() {
		// common part: create layout
		btnPanel1 = new VerticalLayout();
		btnPanel1.setImmediate(false);
		btnPanel1.setWidth("100px");
		btnPanel1.setHeight("-1px");
		btnPanel1.setMargin(false);
		btnPanel1.setSpacing(false);

		// add
		add = new NativeButton();
		add.setCaption("ADD");
		add.setImmediate(true);
		add.setWidth("90px");
		add.setHeight("30px");
		add.addListener(new Button.ClickListener() {

			/**
			 * 
			 */
			private static final long serialVersionUID = 941928594106974769L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				moveSelectItem(sourceTree, targetTree);
			}

		});
		btnPanel1.addComponent(add);
		btnPanel1.setComponentAlignment(add, Alignment.MIDDLE_CENTER);
		// add_all
		add_all = new NativeButton();
		add_all.setCaption("ADD ALL");
		add_all.setImmediate(true);
		add_all.setWidth("90px");
		add_all.setHeight("30px");
		add_all.addListener(new Button.ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -8909864437538546744L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				sourceTree.setValue(sourceTree.getItemIds());
				moveSelectItem(sourceTree, targetTree);
			}

		});
		btnPanel1.addComponent(add_all);
		btnPanel1.setComponentAlignment(add_all, Alignment.MIDDLE_CENTER);
		// remove
		remove = new NativeButton();
		remove.setCaption("REMOVE");
		remove.setImmediate(true);
		remove.setWidth("90px");
		remove.setHeight("30px");
		remove.addListener(new Button.ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -8909864437538546744L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				moveSelectItem(targetTree, sourceTree);
			}

		});
		btnPanel1.addComponent(remove);
		btnPanel1.setComponentAlignment(remove, Alignment.MIDDLE_CENTER);
		// remove_all
		remove_all = new NativeButton();
		remove_all.setCaption("REMOVE ALL");
		remove_all.setImmediate(true);
		remove_all.setWidth("90px");
		remove_all.setHeight("30px");
		remove_all.addListener(new Button.ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -8909864437538546744L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				targetTree.setValue(targetTree.getItemIds());
				moveSelectItem(targetTree, sourceTree);
			}

		});
		btnPanel1.addComponent(remove_all);
		btnPanel1.setComponentAlignment(remove_all, Alignment.MIDDLE_CENTER);
		// create
		create = new NativeButton();
		create.setCaption("CREATE");
		create.setImmediate(true);
		create.setWidth("90px");
		create.setHeight("30px");
		create.addListener(new Button.ClickListener() {
			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				final HandlerForm hf = new HandlerForm();
				hf.center();
				hf.addListener(new Window.CloseListener() {
					@Override
					public void windowClose(CloseEvent e) {
						// TODO Auto-generated method stub
						if (null != hf.getHandlerInfo()) {
							addHandlerItem(hf.getHandlerInfo(), targetTree);
							handlers.add(hf.getHandlerInfo());
						}
					}
				});
				getWindow().addWindow(hf);
			}
		});
		btnPanel1.addComponent(create);
		btnPanel1.setComponentAlignment(create, Alignment.MIDDLE_CENTER);
		// edit
		edit = new NativeButton();
		edit.setCaption("EDIT");
		edit.setImmediate(true);
		edit.setWidth("90px");
		edit.setHeight("30px");
		edit.addListener(new Button.ClickListener() {

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				//System.out.println(sourceTree.getValue().getClass().getName());
				if (((Set) sourceTree.getValue()).size() == 1) {
					final HandlerInfo selectedhandler = (HandlerInfo)((Set) sourceTree.getValue()).iterator().next();
					final HandlerForm hf = new HandlerForm(selectedhandler);
					hf.center();
					hf.addListener(new Window.CloseListener() {
						@Override
						public void windowClose(CloseEvent e) {
							// TODO Auto-generated method stub
							if (null != hf.getHandlerInfo()) {
								addHandlerItem(hf.getHandlerInfo(), sourceTree);
								handlers.add(hf.getHandlerInfo());
								removeHandlerItem(selectedhandler, sourceTree);
								handlers.remove(selectedhandler);
							}
						}
					});
					getWindow().addWindow(hf);
				} else {
					getWindow().showNotification("Please select 1 handler from Left List");
				}
			}
		});
		btnPanel1.addComponent(edit);
		btnPanel1.setComponentAlignment(edit, Alignment.MIDDLE_CENTER);
		return btnPanel1;
	}

	@AutoGenerated
	private VerticalLayout buildBtnPanel2() {
		// common part: create layout
		btnPanel2 = new VerticalLayout();
		btnPanel2.setImmediate(false);
		btnPanel2.setWidth("120px");
		btnPanel2.setHeight("250px");
		btnPanel2.setMargin(false);

		// btn_genAbs
		btn_genAbs = new Button();
		btn_genAbs.setCaption("Comp");
		btn_genAbs.setImmediate(true);
		btn_genAbs.setWidth("100px");
		btn_genAbs.setHeight("100px");
		btnPanel2.addComponent(btn_genAbs);

		// btn_genComp
		btn_genComp = new Button();
		btn_genComp.setCaption("Abs");
		btn_genComp.setImmediate(true);
		btn_genComp.setWidth("100px");
		btn_genComp.setHeight("100px");
		btn_genComp.addListener(new Button.ClickListener() {
			/**
			 * 
			 */
			private static final long serialVersionUID = -8324815917369026554L;

			@Override
			public void buttonClick(ClickEvent event) {
				// TODO Auto-generated method stub
				TriggerMatcher.TriggerMatch(selectedHandlers());

				// Create an embedded component that gets its contents
				// from the resource.
				Embedded newPlot = new Embedded(null, getImageResource());
				newPlot.setHeight("-1px");
				newPlot.setWidth("-1px");
				mainTab.addTab(newPlot, "newPlot");
				mainTab.setSelectedTab(newPlot);
				// image.setHeight("100%");
				// image.setWidth("100%");
				// image.setImmediate(true);

			}

		});
		btnPanel2.addComponent(btn_genComp);

		return btnPanel2;
	}

	private StreamResource getImageResource() {
		StreamSource imagesource = new MyImageSource();
		StreamResource imageresource = new StreamResource(imagesource,
				"plot.png", this.getApplication());
		imageresource.setCacheTime(0);
		return imageresource;
	}

	private void fillTree() {
		for (HandlerInfo hi : handlers) {
			addHandlerItem(hi, sourceTree);
		}
	}

	private void moveSelectItem(Tree source, Tree target) {
		@SuppressWarnings("unchecked")
		Set<Object> selectedIds = (Set<Object>) source.getValue();
		for (Object o : selectedIds) {
			// System.out.println(source.getItem(o));
			if (o.getClass().equals(HandlerInfo.class)) {
				HandlerInfo hi = (HandlerInfo) o;
				if (source.getParent(hi) == null) {
					addHandlerItem(hi, target);
					removeHandlerItem(hi, source);
				}
			}
		}
	}

	private void removeHandlerItem(HandlerInfo hi, Tree tree) {
		Object[] children = tree.getChildren(hi).toArray();
		tree.removeItem(hi);
		tree.removeItem(children[0]);
		tree.removeItem(children[1]);
	}

	private void addHandlerItem(HandlerInfo handler, Tree tree) {
		tree.addItem(handler);
		// get the created item
		Item item = tree.getItem(handler);
		// set our "caption" property
		final Property p = item.getItemProperty(CAPTION_PROPERTY);
		p.setValue(handler.getName());
		Object inputID = tree.addItem();
		tree.getItem(inputID).getItemProperty(CAPTION_PROPERTY)
				.setValue(handler.getInputExpr());
		Object outputID = tree.addItem();
		tree.getItem(outputID).getItemProperty(CAPTION_PROPERTY)
				.setValue(handler.getOutputExpr());
		tree.setParent(inputID, handler);
		tree.setParent(outputID, handler);
	}

	public Set<HandlerInfo> getHandlers() {
		return handlers;
	}

	public void setHandlers(Set<HandlerInfo> handlers) {
		this.handlers = handlers;
	}

	public Set<HandlerInfo> selectedHandlers() {
		Set<HandlerInfo> sHandlers = new HashSet<HandlerInfo>();
		for (Object hi : targetTree.getItemIds()) {
			if (targetTree.getParent(hi) == null)
				sHandlers.add((HandlerInfo) hi);
		}
		return sHandlers;
	}

	class MyImageSource implements StreamResource.StreamSource {
		ByteArrayOutputStream imagebuffer = null;

		@Override
		public InputStream getStream() {
			/* Create an image and draw something on it. */
			BufferedImage image = null;
			try {
				image = ImageIO.read(new URL(
						"file:///home/ziwei/workspace/workflowWebUI/plot.png"));
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}

			try {
				/* Write the image to a buffer. */
				imagebuffer = new ByteArrayOutputStream();
				ImageIO.write(image, "png", imagebuffer);

				/* Return a stream from the buffer. */
				return new ByteArrayInputStream(imagebuffer.toByteArray());
			} catch (IOException e) {
				return null;
			}
		}
	}

	/*
	 * We need to implement this method that returns the resource as a stream.
	 */

}
